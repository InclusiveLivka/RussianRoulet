from aiogram import F, Router
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from app.__init__ import bot
import app.keyboard.reply as kb
import logging
import random

router = Router()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
game_states = {}

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
def create_action_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–°—Ç—Ä–µ–ª—è—Ç—å –≤ —Å–µ–±—è", callback_data="shoot_self")],
        [InlineKeyboardButton(text="–°—Ç—Ä–µ–ª—è—Ç—å –≤–æ –≤—Ä–∞–≥–∞", callback_data="shoot_enemy")],
        [InlineKeyboardButton(text="–ö—Ä—É—Ç–∏—Ç—å –æ–±–æ–π–º—É", callback_data="spin_revolver")]
    ])

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_main_menu_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É", callback_data="start_new_game")]
    ])

async def start_game(users_in_game, chamber_count=6):
    game_id = f"{users_in_game[0][0]}_{users_in_game[1][0]}"
    game_states[game_id] = {
        "users": users_in_game,
        "shooter_count": {user[0]: 0 for user in users_in_game},
        "revolver_position": random.randint(1, chamber_count),  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–∏ –ø—É–ª–∏
        "max_turns": 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤
    }

    first_player, second_player = random.sample(users_in_game, 2)

    await bot.send_message(first_player[0], "‚ùï–•–æ–¥ –¥–æ—Å—Ç–∞–µ—Ç—Å—è –≤–∞–º, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.", reply_markup=create_action_keyboard())
    await bot.send_message(second_player[0], "‚ùóÔ∏è–•–æ–¥ –¥–æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É, –æ–∂–∏–¥–∞–π—Ç–µ –µ–≥–æ –¥–µ–π—Å—Ç–≤–∏–µ.")

    return game_id

@router.callback_query(F.data.in_(["shoot_self", "shoot_enemy", "spin_revolver"]))
async def handle_action(callback: CallbackQuery):
    action_type = callback.data.split('_')[-1]  # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø –¥–µ–π—Å—Ç–≤–∏—è
    await perform_action(callback, action_type)

async def perform_action(callback: CallbackQuery, action_type: str):
    user_id = callback.from_user.id
    game_id = next((gid for gid, users in game_states.items() if user_id in [user[0] for user in users["users"]]), None)

    if game_id is None:
        await bot.send_message(user_id, "‚ùå –í—ã –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ –∏–≥—Ä–µ.")
        return

    users_in_game = game_states[game_id]["users"]
    shooter, opponent = (users_in_game[0], users_in_game[1]) if user_id == users_in_game[0][0] else (users_in_game[1], users_in_game[0])

    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–ø—É—Å–∫–æ–≤
    game_states[game_id]["shooter_count"][shooter[0]] += 1

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –º—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ö–æ–¥–æ–≤
    if game_states[game_id]["shooter_count"][shooter[0]] > game_states[game_id]["max_turns"]:
        await declare_result(opponent, shooter, game_id, "lose")  # –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç
        return

    await callback.message.edit_reply_markup(reply_markup=None)

    if action_type == "self":
        await process_self_shooting(shooter, opponent, game_id)
    elif action_type == "enemy":
        await process_enemy_shooting(shooter, opponent, game_id)
    elif action_type == "spin_revolver":
        game_states[game_id]["revolver_position"] = random.randint(1, 6)  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –ø—É–ª–∏
        await bot.send_message(shooter[0], "üòê–ü–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–Ω–∏—è –æ–±–æ–π–º—ã —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞, –ø–æ–∑–∏—Ü–∏—è —è—á–µ–π–∫–∏ —Å –ø–∞—Ç—Ä–æ–Ω–æ–º –ø–æ–º–µ–Ω—è–ª–∞—Å—å, —Ö–æ–¥ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É.")
        await bot.send_message(opponent[0], "ü§´–ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –ø–æ–º–µ–Ω—è–ª –º–µ—Å—Ç–æ —è—á–µ–π–∫–∏ —Å –ø–∞—Ç—Ä–æ–Ω–æ–º –≤ —Ä–µ–≤–æ–ª—å–≤–µ—Ä–µ, —Ö–æ–¥ –¥–æ—Å—Ç–∞–µ—Ç—Å—è –≤–∞–º.", reply_markup=create_action_keyboard())

async def process_self_shooting(shooter, opponent, game_id):
    if game_states[game_id]["revolver_position"] == 1:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ø–∞–ª –ª–∏ shooter
        await declare_result(shooter, opponent, game_id, "lose")
    else:
        await bot.send_message(shooter[0], "üòÄ–ü—Ä–∏—Å—Ç–∞–≤–∏–≤ —Å—Ç–≤–æ–ª —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞ –∫ —Å–≤–æ–µ–º—É –≤–∏—Å–∫—É –∏ —Å–ø—É—Å—Ç–∏–≤ –∫—É—Ä–æ–∫, –≤—ã –æ—Å—Ç–∞–ª–∏—Å—å –∂–∏–≤—ã, —Ö–æ–¥ –æ—Å—Ç–∞—ë—Ç—Å—è —É –≤–∞—Å.", reply_markup=create_action_keyboard())
        await bot.send_message(opponent[0], "üòÆ‚Äçüí®–í—ã –≤–∏–¥–∏—Ç–µ –∫–∞–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å–ø—É—Å—Ç–∏–ª –∫—É—Ä–æ–∫ —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞ –¥–µ—Ä–∂–∞ —Ä–µ–≤–æ–ª—å–≤–µ—Ä —É —Å–≤–æ–µ–≥–æ –≤–∏—Å–∫–∞, –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Å—Ç–∞—ë—Ç—Å—è –∂–∏–≤—ã–º, —Ö–æ–¥ –ø–æ –ø—Ä–µ–∂–Ω–µ–º—É —É –Ω–µ–≥–æ.")

async def process_enemy_shooting(shooter, opponent, game_id):
    if game_states[game_id]["revolver_position"] == 1:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–ø–∞–ª –ª–∏ opponent
        await declare_result(opponent, shooter, game_id, "lose")
    else:
        await bot.send_message(opponent[0], "üòÖ–í—ã –≤–∏–¥–∏—Ç–µ –∫–∞–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–≤—ë–ª —Å—Ç–≤–æ–ª —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞ –Ω–∞ –≤–∞—à—É –≥–æ–ª–æ–≤—É –∏ —Å–ø—É—Å—Ç–∏–ª –∫—É—Ä–æ–∫, –Ω–æ –≤—ã—Å—Ç—Ä–µ–ª–∞ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, —Ö–æ–¥ –¥–æ—Å—Ç–∞–µ—Ç—Å—è –≤–∞–º.", reply_markup=create_action_keyboard())
        await bot.send_message(shooter[0], "üò∂–ù–∞–≤–µ–¥—è —Å—Ç–≤–æ–ª —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞ –Ω–∞ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ –∏ —Å–ø—É—Å—Ç–∏–≤ –∫—É—Ä–æ–∫, –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ –æ—Å—Ç–∞—ë—Ç—Å—è –∂–∏–≤—ã–º. –¢–µ–ø–µ—Ä—å —Ö–æ–¥ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –µ–º—É.")

async def declare_result(loser, winner, game_id, result_type):
    winner_shots = game_states[game_id]["shooter_count"][winner[0]]
    loser_shots = game_states[game_id]["shooter_count"][loser[0]]

    result_message = (
        f"üèÖ {'–ü–æ—Ä–∞–∂–µ–Ω–∏–µ' if result_type == 'lose' else '–ü–æ–±–µ–¥–∞'} üèÖ\n"
        f"–í—Ä–∞–≥ —Å–ø—É—Å—Ç–∏–ª –∫—É—Ä–æ–∫: {winner_shots} —Ä–∞–∑.\n"
        f"–í—ã —Å–ø—É—Å—Ç–∏–ª–∏ –∫—É—Ä–æ–∫: {loser_shots} —Ä–∞–∑.\n"
        f"{'–ü–æ—Ç–µ—Ä—è: -250 –†–†' if result_type == 'lose' else '–ù–∞–≥—Ä–∞–¥–∞: +500 –†–†'}"
    )

    await bot.send_message(loser[0], result_message)
    await bot.send_message(winner[0], result_message)

    if result_type == "lose":
        await bot.send_message(loser[0], "üíÄ –ü—Ä–∏—Å—Ç–∞–≤–∏–≤ —Å—Ç–≤–æ–ª —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞ –∫ —Å–≤–æ–µ–º—É –≤–∏—Å–∫—É –∏ —Å–ø—É—Å—Ç–∏–≤ –∫—É—Ä–æ–∫, –≤—Å√´ –∫—Ä—É–≥–æ–º —Ä–µ–∑–∫–æ –ø–æ—á–µ—Ä–Ω–µ–ª–æ, –≤—ã –º–µ—Ä—Ç–≤—ã.")
        await bot.send_message(winner[0], "üò¨ –í—ã –≤–∏–¥–∏—Ç–µ –∫–∞–∫ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å–ø—É—Å—Ç–∏–ª –∫—É—Ä–æ–∫ —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞ –¥–µ—Ä–∂–∞ —Ä–µ–≤–æ–ª—å–≤–µ—Ä —É —Å–≤–æ–µ–≥–æ –≤–∏—Å–∫–∞, –ø–æ—Å–ª–µ —á–µ–≥–æ –æ—Å—Ç–∞—ë—Ç—Å—è —Å –¥—ã—Ä–∫–æ–π –≤ –≥–æ–ª–æ–≤–µ. –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –º—ë—Ä—Ç–≤.")
    else:
        await bot.send_message(loser[0], "üèÜ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞.")
        await bot.send_message(winner[0], "üíÄ –ü—Ä–æ—Ç–∏–≤–Ω–∏–∫ –Ω–∞–≤—ë–ª —Å—Ç–≤–æ–ª —Ä–µ–≤–æ–ª—å–≤–µ—Ä–∞ –Ω–∞ –≤–∞—à—É –≥–æ–ª–æ–≤—É –∏ —Å–ø—É—Å—Ç–∏–ª –∫—É—Ä–æ–∫, –≤—Å√´ —Ä–µ–∑–∫–æ –ø–æ—Ç–µ–º–Ω–µ–ª–æ. –í—ã –º–µ—Ä—Ç–≤—ã.")

    del game_states[game_id]  # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await bot.send_message(loser[0], "üîÑ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.main)
    await bot.send_message(winner[0], "üîÑ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.main)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–π –∏–≥—Ä—ã
