from aiogram import F, Router, types
from aiogram.types import Message, CallbackQuery
import app.keyboard.reply as kb
import sqlite3
import time
import random
from app.handlers.game_handlers import choise
from time import monotonic

from app.__init__ import bot
from app.keyboard import inline
from app.database.engine import get_user, ready_falsed
from app.game.session import get_enemy
from app.game.game import start_game


router = Router()

@router.message(F.text == 'üî´–Ω–∞—á–∞—Ç—å –∏–≥—Ä—Éüî´')
async def start(message: Message):
    """
    Handles the start game command. 
    Sends a message to start the game and initiates the search for an opponent.
    """
    # Send a message to the user indicating that the search for an opponent has begun
    search = await message.answer("üîé –ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –ø–æ–∏—Å–∫ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞.")

    # Initiate the search for an opponent
    enemy_players = get_enemy(message)
    print(enemy_players)  # –§—É–Ω–∫—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑ 2 –∏–≥—Ä–æ–∫–æ–≤

    user_one, user_two = enemy_players

    # Display the opponent's profile information
    hideBoard = types.ReplyKeyboardRemove()

    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –∏–≥—Ä–æ–∫–æ–≤
    profile_one = get_user(user_one[0])
    profile_two = get_user(user_two[0])

    profile_one_str = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {profile_one[1]}\n"
        f"üèÜ –ö–æ–ª-–≤–æ –†–†: {profile_one[2]}\n"
        f"üèÖ –ü–æ–±–µ–¥—ã: {profile_one[4]}\n"
        f"–ü—Ä–µ—Ñ–∏–∫—Å: {profile_one[5]}\n"
    )

    profile_two_str = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {profile_two[1]}\n"
        f"üèÜ –ö–æ–ª-–≤–æ –†–†: {profile_two[2]}\n"
        f"üèÖ –ü–æ–±–µ–¥—ã: {profile_two[4]}\n"
        f"–ü—Ä–µ—Ñ–∏–∫—Å: {profile_two[5]}\n"
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∏–≥—Ä–æ–∫–æ–≤ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞
    await bot.send_message(user_one[0], "‚úÖ –ü–æ–∏—Å–∫ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=hideBoard)
    await bot.send_message(user_one[0], profile_two_str)

    await bot.send_message(user_two[0], "‚úÖ –ü–æ–∏—Å–∫ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω.", reply_markup=hideBoard)
    await bot.send_message(user_two[0], profile_one_str)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É —Å –¥–≤—É–º—è –∏–≥—Ä–æ–∫–∞–º–∏
    await start_game(enemy_players)  # –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã —Å –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞–º–∏
    ready_falsed(user_one[0])
    ready_falsed(user_two[0])




@router.message(F.text == 'üîò–ø—Ä–æ—Ñ–∏–ª—åüîò')
async def profile(message: Message):
    """
    Handles the "/profile" command. 
    Sends a message with the user's profile information.

    Args:
        message (Message): The Telegram message object.
    """
    # Get the user's profile information from the database
    user_profile = get_user(message.from_user.id)

    # Format the profile information into a string
    profile_str = (
        f"üë§–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"üèÜ–ö–æ–ª-–≤–æ –†–†: {user_profile[2]}\n"
        f"üîë–ö–æ–ª-–≤–æ –ö–ª—é—á–µ–π: {user_profile[3]}\n"
        f"üèÖ–ü–æ–±–µ–¥—ã: {user_profile[4]}"
    )

    # Send the profile information as a message
    await message.answer(profile_str)


@router.callback_query(F.data == 'cancel')
async def cancel(callback: types.CallbackQuery):
    """
    Handles the callback query when the user cancels the search.

    Args:
        callback (types.CallbackQuery): The Telegram callback query object.
    """
    # Cancel the search and delete the message
    await callback.answer("–ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω",)
    await callback.message.delete()

    # Mark the user as not ready for the game
    ready_falsed(callback.from_user.id)



